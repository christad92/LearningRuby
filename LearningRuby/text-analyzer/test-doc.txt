As stated earlier, computers don’t generate truly random numbers purely from computation. What they do is generate a sequence of numbers that seem random. To do this, the computer starts with a seed number, which it runs through some algorithm and then spits out a seemingly random output.

The seed number is generated by the computer using a combination of different elements, e.g. timestamp, the process ID of the program, e.t.c. Because these elements vary for each request to generate a random number, the seed number will always be different, which would produce a different sequence of numbers, thus the resulting random number output. If you ran the algorithm with the same seed, then you would get the same sequence of numbers each time.

srand is usually used in testing. It could be handy for testing code in your app that deals with randomness, with values that are random but still predictable enough to test. It could also help in isolating or reproducing bugs.

Below we use srand to set the seed and then call rand first to produce a couple of individual random numbers and then to produce a couple sequences of random numbers.

In the real world, many things tend to follow a Normal Distribution. If you have a range of values that something falls under, rarely do you get an equal distribution of all the values. Mostly, a majority of the data tends to fall within a smaller range, with a smaller percentage falling within the larger range. Let’s take an adult man’s height as an example. The shortest height recorded is 54.6 cm (21.5 inches) while the tallest is 267 cm (8'9"). If you want to generate data to simulate the height of men in a population, you might not want to use rand with these limits. You don’t want the probability of getting an 8'9" man to be the same as getting a 6’ man, because the latter is more common.